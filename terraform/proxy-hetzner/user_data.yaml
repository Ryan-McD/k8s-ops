#cloud-config
ssh_authorized_keys:
%{ for _ in ssh_authorized_keys }
  - ${_}
%{ endfor }

users:
  - default
  - name: dmcd
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_import_id:
      - gh:Ryan-McD
    ssh_authorized_keys:
    %{ for _ in ssh_authorized_keys }
      - ${_}
    %{ endfor }

write_files:
# enable bridged traffic
- content: |
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
  owner: root:root
  path: /etc/sysctl.d/99-iptables.conf
  permissions: '0644'
# HAproxy Config
- owner: root:root
  path: /etc/haproxy-setup/haproxy.cfg
  permissions: '0644'
  content: |
    global
      log /dev/log	local0
      log /dev/log	local1 notice
      chroot /var/lib/haproxy
      stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
      stats timeout 30s
      user haproxy
      group haproxy
      daemon

            ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
            ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
            ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
          tune.ssl.default-dh-param 2048

    defaults
      log	global
      mode	tcp
      option	tcplog
      option	dontlognull
            timeout connect 5000
            timeout client  50000
            timeout server  50000
      errorfile 400 /etc/haproxy/errors/400.http
      errorfile 403 /etc/haproxy/errors/403.http
      errorfile 408 /etc/haproxy/errors/408.http
      errorfile 500 /etc/haproxy/errors/500.http
      errorfile 502 /etc/haproxy/errors/502.http
      errorfile 503 /etc/haproxy/errors/503.http
      errorfile 504 /etc/haproxy/errors/504.http
    frontend lb
            bind ${listener_ip}:443
            mode tcp
            option tcplog

            tcp-request inspect-delay 5s
            tcp-request content accept if { req_ssl_hello_type 1 }

            acl application_1 req_ssl_sni -i ${sni_domain1}

            use_backend webapps if application_1
            # default_backend webapps
    backend webapps
            mode tcp

            # maximum SSL session ID length is 32 bytes.
            stick-table type binary len 32 size 30k expire 30m

            acl clienthello req_ssl_hello_type 1
            acl serverhello rep_ssl_hello_type 2

            # use tcp content accepts to detects ssl client and server hello.
            tcp-request inspect-delay 5s
            tcp-request content accept if clienthello

            # no timeout on response inspect delay by default.
            tcp-response content accept if serverhello

            stick on payload_lv(43,1) if clienthello

            # Learn on response if server hello.
            stick store-response payload_lv(43,1) if serverhello

            # balance roundrobin
            # option ssl-hello-chk
            # # simple tcp check is enough for check success
            option tcp-check
            tcp-check connect
            server  s1   ${backend_ip}:443 check # send-proxy-v2
    # listen stats
    #         bind 192.168.57.8:8443 ssl crt /etc/ssl/certs/haproxy.pem
    #         stats enable                    # enable statistics reports
    #         stats hide-version              # Hide the version of HAProxy
    #         stats refresh 30s               # HAProxy refresh time
    #         stats show-node                 # Shows the hostname of the node
    #         stats auth haadmin:[email protected]     # Enforce Basic authentication for Stats page
    #         stats uri /stats                # Statistics URL

# bootcmd:
#   - |
#     if [[ ! -d /home/ubuntu/~.ssh/authorized_keys ]]; then
#     echo "boot cmd"
#     fi

package_update: true
package_upgrade: true
packages:
  - fail2ban
  - ufw
  - haproxy

runcmd:
  - |
    printf "[sshd]\nenabled = true\nbanaction = iptables-multiport" > /etc/fail2ban/jail.local
    systemctl enable fail2ban
    ufw allow OpenSSH
    ufw allow https
    ufw enable
    sed -i -e '/^\(#\|\)PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i -e '/^\(#\|\)PasswordAuthentication/s/^.*$/PasswordAuthentication no/' /etc/ssh/sshd_config
    sed -i -e '/^\(#\|\)X11Forwarding/s/^.*$/X11Forwarding no/' /etc/ssh/sshd_config
    sed -i -e '/^\(#\|\)MaxAuthTries/s/^.*$/MaxAuthTries 2/' /etc/ssh/sshd_config
    sed -i -e '/^\(#\|\)AllowTcpForwarding/s/^.*$/AllowTcpForwarding no/' /etc/ssh/sshd_config
    sed -i -e '/^\(#\|\)AllowAgentForwarding/s/^.*$/AllowAgentForwarding no/' /etc/ssh/sshd_config
    # sed -i -e '/^\(#\|\)AuthorizedKeysFile/s/^.*$/AuthorizedKeysFile .ssh\/authorized_keys/' /etc/ssh/sshd_config
    # sed -i '$a AllowUsers dmcd' /etc/ssh/sshd_config
    cp /etc/haproxy/haproxy.cfg /etc/haproxy.cfg.orig
    cp /etc/haproxy-setup/haproxy.cfg /etc/haproxy/haproxy.cfg
    reboot
${extra_cloud_config_config}